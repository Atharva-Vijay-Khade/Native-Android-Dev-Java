

Android Development for Beginners - Full Course 
FreeCodeCamp.org 

Notes

Activity
    Our Apps has many parts, we can think of an activity as a page for that part
    This definition is not 100% correct, activity more in detailed studied later
    as the course goes ahead

.xml file and activity file 
    .xml file is the file where we specify the layout for the App
    activity file is the file which tells what happens if there's an 
    action on the .xml's layout

build window
    here we can see the progress/phase of the app as it grows
    from here we can locate problems in our app

resources folder {res}
    it has resources like app logo, app images all static components are placed 
    here

manifest file
    specifies general properties for the application
    ie: name and logo of the application info is placed here 
    other properties and features of the app are placed here

gradle files 
    when we want to download the app from the playstore
    then only one apk file is downloaded for our app
    how to generate that apk file, for that this gradle tool is used 
    Gradle is the build tool that will combine all the gradle files 
    and will create an apk file, for testing on emulator or exporting it 
    on playstore, Also we use it to use other people's code, say we want code for 
    youtube file, then we add it's dependencies in the build.gradle file, thus gradle
    will download the code for youtube player and genearte the code for it
    so that we can use it


TODO window
    the things that we have to implement in the app in future and we don't want 
    to forget so we can add a todo
    // TODO: text
    we can find them in project window and seperately in todo window

Logcat 
    helpful in debugging our application

# if we get some warnings or errors in running application then we can 
# select the build option and select Make Project
# Closing and reopening the application will also work
# we can also go to files and invalidate the cache and restart to solve such issues

Profiler
    go to view-tool window-Profiler
    This is the tool which shows how our app uses resources 
    ie: network, cpu, ram etc 

.xml file {contents}
    it has two views, white and blue print views of application
    white one is called DESIGN view
    If we have an invisible component in layout of our app
    then we can keep track of it using blue print view it's not visible 
    in design view

Pallet view in xml
    here we can add ui elements to our app, each element has attributes 
    which we can add, and id associated with it, with which we can control this 
    element form the activity file,
    
XML views 
    it has two types of views
        1] Design view where theres' gui basesd id and attirbute selection
        2] Text view here we can add by typing values to each attirbute
    xml is a markup language
    markup language are just for defining some elements that user is going to see 
    ie: button and text etc
    -> we can add button with gui based selection
    -> Or we can type in xml markup language to add the button
    # we cannot use space giving id to components 
    # also we cannot use #,$ etc characters     
    -> Conventions = first character lower cases and after the first word
    we type in capital letters after each word

Giving constraints to the components in xml
    It's important to specify xml constraints, if we don't specify them
    then the component location won't be fixed during run time, mainly it goes 
    to 0th index on the screen {at the top}
    This is because we are using .ConstraintLayout


Inside Activity File 
    The onCreate function is the starting point of our application
    whatever is written in the curly braces in the onCreate function
    will be executed first
    The setContentView() function is the function which connects our 
    .xml file with the activity file, this shows that these two files are somehow
    related to each other

Using TextView
    In java we have classes that are similar to the ui components in the 
    xml file, these classes can be used to display the ui components

way -> 
    First Create a TextView object
        TextView name_obj;
    Now find the Ui component from the xml file and connect it with This object
        TextView name_obj = findViewById(R.id.NAME_OF_ID_OF_UI_IN_LAYOUT_FILE);
        R class in java android, stands for resources, by this we can have
        acces to all static resources in java, like ui components from the xml file

        now we can say  
            name_obj.setText("new text that we want");

        this will change the text and display what we want 

    Now we want to change this text when we press a button 
    thus we do this using eventListner
    We firs go to xml file and select appropriate ui component
    then we add an onClick into it and specify the method name there
    this method name is created outside the scope of onCreate 
    and inside MainActivity, and we specify what happens after clicking this 
    button here in this method

    Now we want to take the text from the user and show it up on the screen 
    for taking the text from the user we use EditText
    way
        EditText edtText = findViewById(R.id.editTextTextPersonName);
        edtText.getText().toString();   

    VVVVVIMP 
        Scope of the editText is only in the onCrete function
        we cannot use it outside this function
        ie: we cannot define it in onCreate and use it outside it
        so to solve this we do declaration and definition both inside in the 
        function outside the onCreate
    way- Function outside onCreate
        public void changeText(View view) {
        TextView txtView = findViewById(R.id.textView);
        EditText edtText = findViewById(R.id.editTextTextPersonName);
        txtView.setText("hello " + edtText.getText().toString());
    }

    
__________________________JAVA_______________________________

java ide's - intelliJ, Ecplise

Android Studio is built upon the intelliJ IDE, So they both look very similar

-> Printing Statement in java

System.out.println("asijioajsdfoij"); - prints the string and inserts a new line
System.out.print("hioasdfhoi"); - prints and no new line, continous printing

comments //,
         // TODO Do something -> addeds the todos' and useful in Development

variables
    storing data in java application
    int number = 5;    // small integers 2^31
    System.out.println(number);   
    long myLong = 5; // stores large numbers 2^63
    
    #imp for floating numbers we write
    float myFloat = (float) 4.5;
    casting is required 

    double myDouble = 4.5; // stores larger values than float

    char myChar = 'c';
    we can also store special characters in myChar by using special unicodes

    String name = "Meisam";  // String is a class but upper all are primitive data types

    boolean myBoolean = false; // takes only true of false values

Operators in Java

    Arithmetic Operators

        int a = 6;
        int b = 2;
        int answer = a + b;
        int answer2 = a - b;
        int answer3 = a / b;  // b!= 0 handle this exception, or application will crash
        int answer4 = a * b;
        int answer5 = a % b;

        double answer = (double) a/b; // integer division 
        // but this will take a/b exact value as if a = 5 and b = 2
        // answer will be 2.5
        // this is different from C/C++

        String firstName = "Hello";
        String lastName = "Bye";
        we can use + operator to concatinate the above two strings
        String fullName = firstName + lastName;
        System.out.println(fullName);
        
        int a = 5;
        a = a + 2;
        or we could say
        a+=2;
        both are same

        for increment 
        a++;
        or 
        a = a + 1;
        same goes for minus

        ShortHand Notations
        +=
        -=
        /=
        *=
        %= 
    
    Relational Operators in Java

        GreaterThan > /LessThan < operator
            boolean answer = a>b;
            boolean answer2 = a<b;  
        Euquality Operators
            boolean answer = a==b;
        Comparison Operators
            boolean answer = a>=b;
            boolean answer = a<=b;
            boolean answer = a!=b;
    
    Logical Operators in Java   

        boolean answer = a==5 || b==2; // OR operator
        boolean answer = a==5&&b==2; // And Operator

    Conditional Statements

        if(a>3)  {
            System.out.println("a is greater than 3");
        }

        System.out.println("continues here..");
        
        if(condition){
            //code if condition true
        }
        else {
            // if condition is false
        }

        we can also wirte 
        if(!condition) {
            //if condition not true
        }
        else {
            // if condition is true
        }

        we can have else if 

        if(a>3){
            //
        }
        else if(a<0){

        }
        else if(a==0){

        }
        else{

        }

        switch(a){
            case 1:
                System.out.println("A is one");
                break;
            case 2:
                //
                break;
            case 3:
                //
                break;
            default:
                //
                break;
        }

        loops in java

        1] for loops    
            int a = 10;
            //use 10 or a in for loop
            for(int i=0;i<10;i++){
                System.out.println(i);
            }

        2] while loop   
            while(a<10){  // infinite loop
                //
            }
            // so change value of a in the while loop

            break; 
            and continue; 
            in the loop

            int a = 5;
            while(a<10){
                a++;
                if(a==8)
                    continue;
                System.out.print(a);
            }

        3] Do while loop
            do {
                System.out.print("Hello");
            }while(a<5);

        To take input 

        System.out.println("Please enter number");
        Scanner scanner = new scanner(System.in);
        int answer = scanner.nextInt();
        System.out.print("Ansewer was : " + answer);
        
        String name = scanner.next();
        // to take name which is string

        Generating random number 

        Random random = new Random(); // generates random number from 0 to 19 both inclusive
        int number = random.nextInt(bound : 20);

    Arrays in java

        String students[] = new Strings(5);
        students[0] = "ben";
        students[1] = "ten";
        students[2] = "eleven";
        ... 

        String employees[] = {"ben","tom","ken"};

        int numbers[] = {1,2,3,4,5,6};

        for(int i=0;i<numbers.length;i++)
            System.out.println(numbers[i]);

        if we want dynamic sized arrays then we can't use string array
        ie : we can not add 5 th element in string array of size 4

        String names[] = {"hello","bye","ken","ten"};

        String contacts[] = {"1","2","3","4"};

        for(int i=0;i<names.length;i++){
            System.out.println(names[i]); 
        }

        System.out.println("Please Enter a name");
        Scanner scanner = new Scanner(System.in);
        String name = scanner.next();
        for(int i=0;i<names.length;i++){
            if(name == names[i]){ // this is incorrect way to compare in java
                                  // as name is a reference variable 
            }                     // so it can't be compared with string as it points to a string and is not actually a string

            // correct method 
            if(name.equals(names[i])){ // .equals method string object
                //
            }
    
        }


___________________________________________________________________________________________________________________________________________________________________________________________
    
Object Oriented Programming in JAVA - VVVVVIMP


